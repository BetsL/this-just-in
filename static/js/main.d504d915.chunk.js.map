{"version":3,"sources":["components/Links.js","components/LinkList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Footer.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Links","url","title","author","className","style","border","href","LinkList","stories","map","story","i","key","id","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","borderRadius","height","width","margin","padding","backgroundColor","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Footer","requestStories","dispatch","link","fetch","then","response","json","data","payload","hits","catch","App","onRequestStories","searchField","onSearchChange","isPending","filteredStories","filter","toLowerCase","includes","connect","searchStories","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateStories","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d504d915.chunk.js","sourcesContent":["import React from 'react';\n\nconst Links = ({ url, title, author }) => {\n\treturn (\n\t\t<div className='tc bg-white dib br3 pa3 ma2 grow bw2 shadow-5' style={{ border: '1px solid #a9a9a9' }}>\n\t\t\t<a href={ url }>{ title }</a>\n\t\t\t<p>{ author }</p>\n\t\t</div>\n\t);\n}\n\nexport default Links;","import React from 'react';\nimport Links from './Links';\n\nconst LinkList = ({ stories }) => {\n\t// if (true) {\t\t\t\t\t\t// for production\n\t// \tthrow new Error('Noooooo!');\n\t// }\t\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\tstories.map((story,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Links \n\t\t\t\t\t\t\tkey={ i } \n\t\t\t\t\t\t\tid={ story.id } \n\t\t\t\t\t\t\turl={ story.url } \n\t\t\t\t\t\t\ttitle={ story.title }\n\t\t\t\t\t\t\tauthor={ story.author } \n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default LinkList;\n\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='tc pa3 ba b--pink bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Search Hacker News'\n\t\t\t\tonChange={ searchChange }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid #5d6063', borderRadius: '3px', height: '650px', width: '80%', margin: '20px auto', padding: '20px', backgroundColor: '#f5f5f5' }}>\n\t\t\t{ props.children }\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops. That's not good.</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h4>Bets App Press</h4>\n\t\t</div>\n\t);\n}\n\nexport default Footer;","import { apiCall } from './api/api';\nimport { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_STORIES_PENDING,\n\tREQUEST_STORIES_SUCCESS,\n\tREQUEST_STORIES_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n}) \n\nexport const requestStories = () => (dispatch) => {\n\tdispatch({ type: REQUEST_STORIES_PENDING });\n\t// fetch('https://hn.algolia.com/api/v1/search_by_date?tags=story&numericFilters=created_at_i%3E1249344000,created_at_i%3C1533340800&hitsPerPage=50')\n\t// \t.then(response => response.json())\n\t//  .then(data => this.setState({ stories: data.hits }));\n\tapiCall('https://hn.algolia.com/api/v1/search_by_date?tags=story&numericFilters=created_at_i%3E1249344000,created_at_i%3C1533340800&hitsPerPage=75')\n\t\t.then(data => dispatch({ type: REQUEST_STORIES_SUCCESS, payload: data.hits }))\n\t\t.catch(error => dispatch({ type: REQUEST_STORIES_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_STORIES_PENDING = 'REQUEST_STORIES_PENDING';\nexport const REQUEST_STORIES_SUCCESS = 'REQUEST_STORIES_SUCCESS';\nexport const REQUEST_STORIES_FAILED = 'REQUEST_STORIES_FAILED';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport LinkList from '../components/LinkList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Footer from '../components/Footer';\nimport './App.css';\n\nimport { setSearchField, requestStories } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchStories.searchField,\n\t\tstories: state.requestStories.stories,\n\t\tisPending: state.requestStories.isPending,\n\t\terror: state.requestStories.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestStories: () => dispatch(requestStories())\n\t}\n}\n\nclass App extends Component {\n\t// no longer needed (local state)\n\t// constructor() {\n\t// \tsuper()\n\t// \tthis.state = {\n\t// \t\tstories: [],\n\t// \t}\n\t// }\n\n\tcomponentDidMount() {\n\t\t// through actions ...\n\t\t// fetch('https://hn.algolia.com/api/v1/search_by_date?tags=story&numericFilters=created_at_i%3E1249344000,created_at_i%3C1533340800&hitsPerPage=50')\n\t\t// \t.then(response => response.json())\n\t\t// \t.then(data => this.setState({ stories: data.hits }));\n\t\tthis.props.onRequestStories();\n\t}\n\n\t// coming down as props, don't need to declare it as a method of app\n\t// onSearchChange = (event) => {\n\t// \tthis.setState({ searchfield: event.target.value });\n\t// }\n\n\trender() {\n\t\t// const { stories } = this.state;\n\t\tconst { searchField, onSearchChange, stories, isPending }  = this.props;\n\t\tconst filteredStories = stories.filter(story => {\n\t\t\t\treturn story.title.toLowerCase().includes(searchField.toLowerCase());\n\t\t\t\t// console.log(story.title.toLowerCase());\n\t\t})\n\t\t\treturn isPending ?\n\t\t\t<h1>Loading ...</h1> :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>This Just In ...</h1>\n\t\t\t\t\t<SearchBox searchChange={ onSearchChange }/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<LinkList stories={ filteredStories }/>\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t\t<Footer />\n\t\t\t\t</div>\n\t\t\t);\n\t\t\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_STORIES_PENDING,\n\tREQUEST_STORIES_SUCCESS,\n\tREQUEST_STORIES_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchStories = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD: \n\t\t\t// cleaner - { ...state, searchField:action.payload }\n\t\t\treturn Object.assign({}, state, { searchField:action.payload })\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}\n\nconst initialStateStories = {\n\tisPending: false,\n\tstories: [],\n\terror: ''\n}\n\nexport const requestStories = (state=initialStateStories, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_STORIES_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true })\n\t\tcase REQUEST_STORIES_SUCCESS:\n\t\t\treturn Object.assign({}, state, { stories: action.payload, isPending: false })\n\t\tcase REQUEST_STORIES_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchStories, requestStories } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchStories, requestStories })\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t\t\t\t<Provider store={ store }>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}